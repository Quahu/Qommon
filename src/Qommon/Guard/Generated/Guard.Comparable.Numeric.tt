<#@include file="TypeInfo.ttinclude" #>using System;
using System.Runtime.CompilerServices;

namespace Qommon
{
    public static partial class Guard
    {
<#
Generate(NumericTypes, typeInfo =>
{
    var (type, prefix) = typeInfo;
#>
        /// <summary>
        ///     Asserts that the input value must be equal to a specified value.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="target"> The target <see <#=prefix#>=" <#=type#> "/> value to test for. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentException"> Thrown if <paramref name="value"/> is != <paramref name="target"/>. </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsEqualTo(<#=type#> value, <#=type#> target, [CallerArgumentExpression("value")] string name = null)
        {
            if (value == target)
                return;

            Throw.ArgumentExceptionForIsEqualTo(value, target, name);
        }

        /// <summary>
        ///     Asserts that the input value must be not equal to a specified value.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="target"> The target <see <#=prefix#>=" <#=type#> "/> value to test for. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentException"> Thrown if <paramref name="value"/> is == <paramref name="target"/>. </exception>
        /// <remarks> The method is generic to avoid boxing the parameters, if they are value types. </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsNotEqualTo(<#=type#> value, <#=type#> target, [CallerArgumentExpression("value")] string name = null)
        {
            if (value != target)
                return;

            Throw.ArgumentExceptionForIsNotEqualTo(value, target, name);
        }

        /// <summary>
        ///     Asserts that the input value must be less than a specified value.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="maximum"> The exclusive maximum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > = <paramref name="maximum"/>. </exception>
        /// <remarks> The method is generic to avoid boxing the parameters, if they are value types. </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsLessThan(<#=type#> value, <#=type#> maximum, [CallerArgumentExpression("value")] string name = null)
        {
            if (value < maximum)
                return;

            Throw.ArgumentOutOfRangeExceptionForIsLessThan(value, maximum, name);
        }

        /// <summary>
        ///     Asserts that the input value must be less than or equal to a specified value.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="maximum"> The inclusive maximum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentOutOfRangeException"> Thrown if <paramref name="value"/> is > <paramref name="maximum"/>. </exception>
        /// <remarks> The method is generic to avoid boxing the parameters, if they are value types. </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsLessThanOrEqualTo(<#=type#> value, <#=type#> maximum, [CallerArgumentExpression("value")] string name = null)
        {
            if (value <= maximum)
                return;

            Throw.ArgumentOutOfRangeExceptionForIsLessThanOrEqualTo(value, maximum, name);
        }

        /// <summary>
        ///     Asserts that the input value must be greater than a specified value.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="minimum"> The exclusive minimum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentOutOfRangeException"> Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/>. </exception>
        /// <remarks> The method is generic to avoid boxing the parameters, if they are value types. </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsGreaterThan(<#=type#> value, <#=type#> minimum, [CallerArgumentExpression("value")] string name = null)
        {
            if (value > minimum)
                return;

            Throw.ArgumentOutOfRangeExceptionForIsGreaterThan(value, minimum, name);
        }

        /// <summary>
        ///     Asserts that the input value must be greater than or equal to a specified value.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="minimum"> The inclusive minimum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentOutOfRangeException"> Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/>. </exception>
        /// <remarks> The method is generic to avoid boxing the parameters, if they are value types. </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsGreaterThanOrEqualTo(<#=type#> value, <#=type#> minimum, [CallerArgumentExpression("value")] string name = null)
        {
            if (value >= minimum)
                return;

            Throw.ArgumentOutOfRangeExceptionForIsGreaterThanOrEqualTo(value, minimum, name);
        }

        /// <summary>
        ///     Asserts that the input value must be in a given range.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="minimum"> The inclusive minimum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="maximum"> The exclusive maximum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > = <paramref name="maximum"/>. </exception>
        /// <remarks>
        /// This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
        /// The method is generic to avoid boxing the parameters, if they are value types.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsInRange(<#=type#> value, <#=type#> minimum, <#=type#> maximum, [CallerArgumentExpression("value")] string name = null)
        {
            if (value >= minimum && value < maximum)
                return;

            Throw.ArgumentOutOfRangeExceptionForIsInRange(value, minimum, maximum, name);
        }

        /// <summary>
        ///     Asserts that the input value must not be in a given range.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="minimum"> The inclusive minimum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="maximum"> The exclusive maximum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > = <paramref name="minimum"/> or &lt; <paramref name="maximum"/>. </exception>
        /// <remarks>
        /// This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
        /// The method is generic to avoid boxing the parameters, if they are value types.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsNotInRange(<#=type#> value, <#=type#> minimum, <#=type#> maximum, [CallerArgumentExpression("value")] string name = null)
        {
            if (value < minimum || value >= maximum)
                return;

            Throw.ArgumentOutOfRangeExceptionForIsNotInRange(value, minimum, maximum, name);
        }

        /// <summary>
        ///     Asserts that the input value must be in a given interval.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="minimum"> The exclusive minimum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="maximum"> The exclusive maximum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is &lt;= <paramref name="minimum"/> or > = <paramref name="maximum"/>. </exception>
        /// <remarks>
        /// This API asserts the equivalent of "<paramref name="value"/> in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
        /// The method is generic to avoid boxing the parameters, if they are value types.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsBetween(<#=type#> value, <#=type#> minimum, <#=type#> maximum, [CallerArgumentExpression("value")] string name = null)
        {
            if (value > minimum && value < maximum)
                return;

            Throw.ArgumentOutOfRangeExceptionForIsBetween(value, minimum, maximum, name);
        }

        /// <summary>
        ///     Asserts that the input value must not be in a given interval.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="minimum"> The exclusive minimum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="maximum"> The exclusive maximum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentOutOfRangeException"> Thrown if <paramref name="value"/> is > <paramref name="minimum"/> or &lt; <paramref name="maximum"/>. </exception>
        /// <remarks>
        /// This API asserts the equivalent of "<paramref name="value"/> not in (<paramref name="minimum"/>, <paramref name="maximum"/>)", using arithmetic notation.
        /// The method is generic to avoid boxing the parameters, if they are value types.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsNotBetween(<#=type#> value, <#=type#> minimum, <#=type#> maximum, [CallerArgumentExpression("value")] string name = null)
        {
            if (value <= minimum || value >= maximum)
                return;

            Throw.ArgumentOutOfRangeExceptionForIsNotBetween(value, minimum, maximum, name);
        }

        /// <summary>
        ///     Asserts that the input value must be in a given interval.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="minimum"> The inclusive minimum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="maximum"> The inclusive maximum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentOutOfRangeException"> Thrown if <paramref name="value"/> is &lt; <paramref name="minimum"/> or > <paramref name="maximum"/>. </exception>
        /// <remarks>
        /// This API asserts the equivalent of "<paramref name="value"/> in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
        /// The method is generic to avoid boxing the parameters, if they are value types.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsBetweenOrEqualTo(<#=type#> value, <#=type#> minimum, <#=type#> maximum, [CallerArgumentExpression("value")] string name = null)
        {
            if (value >= minimum && value <= maximum)
                return;

            Throw.ArgumentOutOfRangeExceptionForIsBetweenOrEqualTo(value, minimum, maximum, name);
        }

        /// <summary>
        ///     Asserts that the input value must not be in a given interval.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="minimum"> The inclusive minimum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="maximum"> The inclusive maximum <see <#=prefix#>=" <#=type#> "/> value that is accepted. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentOutOfRangeException">Thrown if <paramref name="value"/> is > = <paramref name="minimum"/> or &lt;= <paramref name="maximum"/>. </exception>
        /// <remarks>
        /// This API asserts the equivalent of "<paramref name="value"/> not in [<paramref name="minimum"/>, <paramref name="maximum"/>]", using arithmetic notation.
        /// The method is generic to avoid boxing the parameters, if they are value types.
        /// </remarks>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsNotBetweenOrEqualTo(<#=type#> value, <#=type#> minimum, <#=type#> maximum, [CallerArgumentExpression("value")] string name = null)
        {
            if (value < minimum || value > maximum)
                return;

            Throw.ArgumentOutOfRangeExceptionForIsNotBetweenOrEqualTo(value, minimum, maximum, name);
        }
<#
    if (type is "byte" or "short" or "int" or "long" or "float" or "double" or "decimal" or "nint")
    {
#>

        /// <summary>
        ///     Asserts that the input value must be positive.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown if <paramref name="value"/> is <= <c>0</c>.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsPositive(<#=type#> value, [CallerArgumentExpression("value")] string name = null)
        {
            if (value > 0)
                return;

            Throw.ArgumentOutOfRangeExceptionForIsPositive(value, name);
        }

        /// <summary>
        ///     Asserts that the input value must not be positive.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown if <paramref name="value"/> is > <c>0</c>.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsNotPositive(<#=type#> value, [CallerArgumentExpression("value")] string name = null)
        {
            if (value <= 0)
                return;

            Throw.ArgumentOutOfRangeExceptionForIsNotPositive(value, name);
        }

        /// <summary>
        ///     Asserts that the input value must be negative.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown if <paramref name="value"/> is > = <c>0 </c>.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsNegative(<#=type#> value, [CallerArgumentExpression("value")] string name = null)
        {
            if (value < 0)
                return;

            Throw.ArgumentOutOfRangeExceptionForIsNegative(value, name);
        }

        /// <summary>
        ///     Asserts that the input value must not be negative.
        /// </summary>
        /// <param name="value"> The input <see <#=prefix#>=" <#=type#> "/> value to test. </param>
        /// <param name="name"> The name of the input parameter being tested. </param>
        /// <exception cref="ArgumentOutOfRangeException">
        ///     Thrown if <paramref name="value"/> is < <c>0</c>.
        /// </exception>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static void IsNotNegative(<#=type#> value, [CallerArgumentExpression("value")] string name = null)
        {
            if (value >= 0)
                return;

            Throw.ArgumentOutOfRangeExceptionForIsNotNegative(value, name);
        }
<#
    }
});
#>
    }
}
