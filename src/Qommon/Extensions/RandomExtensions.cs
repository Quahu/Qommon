using System;
using System.ComponentModel;
using System.Runtime.InteropServices;

namespace Qommon
{
    /// <summary>
    ///     Represents <see cref="Random"/> extensions.
    /// </summary>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public static class RandomExtensions
    {
        /// <summary>
        ///     Returns a random <see cref="bool"/> based on <see cref="Random.NextDouble()"/>
        ///     returning less than <c>0.5</c>.
        /// </summary>
        /// <returns>
        ///     A <see cref="bool"/>.
        /// </returns>
        public static bool NextBoolean(this Random random)
        {
            return random.NextDouble() < 0.5;
        }

        /// <summary>
        ///     Returns a random <see cref="bool"/> based on <see cref="Random.NextDouble()"/>
        ///     returning less than <paramref name="probability"/>.
        /// </summary>
        /// <param name="random"> The <see cref="Random"/> instance. </param>
        /// <param name="probability"> The [0..1) probability. </param>
        /// <returns>
        ///     A <see cref="bool"/>.
        /// </returns>
        public static bool NextBoolean(this Random random, double probability)
        {
            Guard.IsBetweenOrEqualTo(probability, 0, 1);

            return random.NextDouble() < probability;
        }

        /// <summary>
        ///     Returns a random <typeparamref name="T"/> constructed from randomly generated bytes.
        /// </summary>
        /// <remarks>
        ///     <typeparamref name="T"/> must be an unmanaged type.
        /// </remarks>
        /// <param name="random"> The <see cref="Random"/> instance. </param>
        /// <typeparam name="T"> The type to generate. </typeparam>
        /// <returns>
        ///     A new <typeparamref name="T"/> with random data.
        /// </returns>
        public static T Next<T>(this Random random)
            where T : unmanaged
        {
            var value = default(T);
            random.NextBytes(MemoryMarshal.AsBytes(MemoryMarshal.CreateSpan(ref value, 1)));
            return value;
        }
    }
}
